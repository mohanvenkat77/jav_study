

/*
Please implement this method to return the sum of the
two largest integer numbers in a given array.
*/
1. Implement the following function

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Question Code: Start
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
public static int sumOfTwoLargestElements(int[] a) {
	if (null == a || a.length == 0) {
    	return 0;
    }
    return Arrays.stream(a).sorted().skip(a.length - 2).sum();
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Question Code: End
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/*
Please implement this method to return the integer number in a
given array that is closest to zero.
If there are two equally closest to zero elements like 2 and -2
consider the positive element, i.e. 2, to be &quot;closer&quot; to zero.
*/
2. Implement the following function

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Question Code: Start
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
public static int getClosestToZero(int[] a) {
	if (null == a || a.length == 0) {
		return 0;
	}
	int[] sortedArray = Arrays.stream(a).sorted().toArray();
 	int zero = 0;
	int positiveNear = 0;
	int negativeNear = sortedArray[0];
	for (int i = 0; i < sortedArray.length; i++) {
    	if (zero > sortedArray[i] && negativeNear <= sortedArray[i]) {
			negativeNear = sortedArray[i];
		}
		if (zero < sortedArray[i]) {
			positiveNear = sortedArray[i];
		    break;
		}
	}
	if (zero == positiveNear) {
	     return negativeNear;
	}
	return (zero == negativeNear || Math.abs(negativeNear) >= Math.abs(positiveNear)) ? positiveNear : negativeNear
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Question Code: End
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



3. Write a Java program to list out the first 1500 natural numbers
whose factor(s) is/are either ONLY 2, 3, or 5. The faster your program
can complete the calculation the better, but it should not run more
than 2 minute.
For your reference, the first 20 numbers are (factors listed after
semicolon):
2 : 2
3 : 3
4 : 2 2
5 : 5
6 : 2 3
8 : 2 2 2
9 : 3 3
10 : 2 5
12 : 2 2 3
15 : 3 5
16 : 2 2 2 2
18 : 2 3 3
20 : 2 2 5
24 : 2 2 2 3
25 : 5 5
27 : 3 3 3
30 : 2 3 5
32 : 2 2 2 2 2
36 : 2 2 3 3
40 : 2 2 2 5
PS: 21 (3*7), 22 (2*11), 26 (2*13) are numbers that should not be in
the list.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Question Code: Start
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.time.Duration;
import java.time.Instant;
import java.util.*;

public class NaturalNumberFactors {
    public static void main(String[] args) {
        Instant now = Instant.now();
        Map<Integer, List<Integer>> naturalNumberFactors = getNaturalNumberFactors(1500);
        for (Integer i : naturalNumberFactors.keySet()) {
            System.out.println(i + ":" + naturalNumberFactors.get(i));
        }
        long executionTime = Duration.between(now, Instant.now()).getSeconds();
        System.out.println("Execution time in Seconds : " + executionTime);
    }
    
    public static TreeMap<Integer, List<Integer>> getNaturalNumberFactors(int naturalNum) {
        int count = 0;
        TreeMap<Integer, List<Integer>> integerListTreeMap = new TreeMap<>();
        for (int i = 2; count <= naturalNum; i++) {
            List<Integer> remainder = new ArrayList<>();
            int number = i;
            while (number % 2 == 0 || number % 3 == 0 || number % 5 == 0) {
                if (number % 2 == 0) {
                    number = number / 2;
                    remainder.add(2);
                } else if (number % 3 == 0) {
                    number = number / 3;
                    remainder.add(3);
                } else {
                    number = number / 5;
                    remainder.add(5);
                }
            }
            if (number == 1) {
                count++;
                integerListTreeMap.put(i, remainder);
            }
        }
        return integerListTreeMap;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Question Code: End
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SQL
1. Question 2 &amp; 3 will based on the following table schema:
 order_id NUMBER
 customer_name VARCHAR
 order_date DATE
 quantity NUMBER

CREATE TABLE orders (order_id NUMBER NOT NULL, customer_name VARCHAR2(240), order_date DATE, quantity NUMBER, CONSTRAINT orders_pk PRIMARY KEY (order_id));


2. Please write a SQL query to search for the latest order with
quantity larger than X.

Query: select * from (select * from orders where quantity > x order by order_date desc)where rownum = 1;


3. Please write a SQL query to list down for each customer how many orders they have made respectively.

Query: select count(*) ords, customer_name from orders group by customer_name;