mockito

Mocking is a testing technique where real components are replaced with objects that have a predefined behavior (mock objects) only for the test/tests that have been created for. In other words, a mock object is an object that is configured to return a specific output for a specific input, without performing any real action.

this is mainly used for test driven development projects, where we test all the cases even before the actual service is implemented.
example, if we have a service and the service is not yet implemented, then we can write the test cases for the service by using the mockito, where we provide the sample input and also the sample output

When we want to test a component that depends on other component, but which is not yet developed. This happens often when working in team, and component development is divided between several developers. If mocking wouldnâ€™t exist, we would have to wait until the other developer/developers end the required component/component for testing ours.

we use mockito When the real component performs slow operations, usual with dealing with database connections or other intense disk read/write operations. It is not weird to face database queries that can take 10, 20 or more seconds in production environments. Forcing our tests to wait that time would be a considerable waste of useful time that can be spent in other important parts of the development.

When there are infrastructure concerns that would make impossible the testing. This is similar in same way to the first scenario described when, for example, our development connects to a database, but the server where is hosted is not configured or accessible for some reason.

Junit dependency,
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-all</artifactId>
    <version>1.10.19</version>
</dependency>



https://examples.javacodegeeks.com/core-java/mockito/mockito-tutorial-beginners/#section_4 

